name: CI/CD Medilabo Microservices

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  # -------------------------
  # 1. Build & test patient-service (MySQL)
  # -------------------------
  build-test-patient-service:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: admin567
          MYSQL_DATABASE: diabetes_db
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -padmin567"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    defaults:
      run:
        working-directory: ./patient-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build patient-service
        run: mvn clean package -DskipTests=false
      - name: Run unit tests
        run: mvn test
      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: patient-service-jar
          path: target/patient-service-*.jar

  coverage-patient-service:
    runs-on: ubuntu-latest
    needs: build-test-patient-service
    defaults:
      run:
        working-directory: ./patient-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run tests and generate reports
        run: mvn verify
      - name: Archive JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-patient-service
          path: target/site/jacoco/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-upload
          fail_ci_if_error: true
  docker-push-patient-service:
    runs-on: ubuntu-latest
    needs: build-test-patient-service
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./patient-service
          push: true
          tags: zagoue/patient-service:latest

  # -------------------------
  # 2. Build & test note-service (MongoDB)
  # -------------------------
  build-test-note-service:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    defaults:
      run:
        working-directory: ./note-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build note-service
        run: mvn clean package -DskipTests=false
      - name: Run unit tests
        run: mvn test
      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: note-service-jar
          path: target/*.jar

  coverage-note-service:
    runs-on: ubuntu-latest
    needs: build-test-note-service
    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    defaults:
      run:
        working-directory: ./note-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run tests and generate reports
        run: mvn verify
      - name: Archive JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-note-service
          path: target/site/jacoco/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-upload
          fail_ci_if_error: true

  docker-push-note-service:
    runs-on: ubuntu-latest
    needs: build-test-note-service
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./note-service
          push: true
          tags: zagoue/note-service:latest

  # -------------------------
  # 3. Build & test assessment-service (MongoDB & MySQL si besoin)
  # -------------------------
  build-test-assessment-service:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: admin567
          MYSQL_DATABASE: diabetes_db
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -padmin567"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    defaults:
      run:
        working-directory: ./assessment-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build assessment-service
        run: mvn clean package -DskipTests=false
      - name: Run unit tests
        run: mvn test
      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: assessment-service-jar
          path: target/*.jar

  coverage-assessment-service:
    runs-on: ubuntu-latest
    needs: build-test-assessment-service
    defaults:
      run:
        working-directory: ./assessment-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run tests and generate reports
        run: mvn verify
      - name: Archive JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-assessment-service
          path: target/site/jacoco/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-upload
          fail_ci_if_error: true
  docker-push-assessment-service:
    runs-on: ubuntu-latest
    needs: build-test-assessment-service
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./assessment-service
          push: true
          tags: zagoue/assessment-service:latest

  # -------------------------
  # 4. Build & test gateway-service (pas de DB)
  # -------------------------
  build-test-gateway-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./gateway-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build gateway-service
        run: mvn clean package -DskipTests=false
      - name: Run unit tests
        run: mvn test
      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: gateway-service-jar
          path: target/*.jar

  coverage-gateway-service:
    runs-on: ubuntu-latest
    needs: build-test-gateway-service
    defaults:
      run:
        working-directory: ./gateway-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run tests and generate reports
        run: mvn verify
      - name: Archive JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-gateway-service
          path: target/site/jacoco/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-upload
          fail_ci_if_error: true
  docker-push-gateway-service:
    runs-on: ubuntu-latest
    needs: build-test-gateway-service
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./gateway-service
          push: true
          tags: zagoue/gateway-service:latest

  # -------------------------
  # 5. Build & test frontend-service (pas de DB)
  # -------------------------
  build-test-frontend-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build frontend-service
        run: mvn clean package -DskipTests=false
      - name: Run unit tests
        run: mvn test
      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: frontend-service-jar
          path: target/*.jar

  coverage-frontend-service:
    runs-on: ubuntu-latest
    needs: build-test-frontend-service
    defaults:
      run:
        working-directory: ./frontend-service
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run tests and generate reports
        run: mvn verify
      - name: Archive JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-frontend-service
          path: target/site/jacoco/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-upload
          fail_ci_if_error: true
  docker-push-frontend-service:
    runs-on: ubuntu-latest
    needs: build-test-frontend-service
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-service
          push: true
          tags: zagoue/frontend-service:latest

  # -------------------------
  # 6. Stack test avec Docker Compose (doit lancer les DB !)
  # -------------------------
  stack-integration-test:
    runs-on: ubuntu-latest
    needs:
      - docker-push-patient-service
      - docker-push-note-service
      - docker-push-assessment-service
      - docker-push-gateway-service
      - docker-push-frontend-service
    steps:
      - uses: actions/checkout@v4
      - name: Run Docker Compose Stack (with DBs)
        run: |
          docker compose pull || true
          docker compose up -d
          sleep 40 # attends le démarrage complet
          docker compose ps
      - name: Check health of services
        run: |
          docker compose ps
          docker compose logs
      - name: Tear down
        run: docker compose down
